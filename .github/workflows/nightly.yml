name: CinnamonToast Nightly

on:
  push:
    branches:
      - main  # for now 
  schedule:
  - cron: 0 1 * * * 
permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
     
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        repository: thebest12dev/cinnamontoast
        ref: dev
    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: '11'  # You can specify other versions like '8', '17', etc.
        distribution: 'zulu'

    # Optional: Verify Java installation
    - name: Verify JDK installation
      run: java -version
    - name: Set up MSVC and CMake
      uses: microsoft/setup-msbuild@v1
      with:
        vs-version: 'latest'  
        

    # - name: Install Ninja
    #   run: |
    #     choco install ninja 
    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: vcpkg
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-
    - name: Set up vcpkg
      run: |
        # Install required tools and dependencies
        echo "Setting up vcpkg"

        # Clone the vcpkg repository
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg

        # Bootstrap vcpkg to build it
        ./bootstrap-vcpkg.bat
        cd..
        
        ./vcpkg/vcpkg install
    
    - name: Configure with CMake
      run: |
        mkdir build
        cd build
        $VCPKG_PATH="$PWD/../vcpkg/scripts/buildsystems/vcpkg.cmake"
        echo $VCPKG_PATH
        
        cmake .. -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="$VCPKG_PATH" -DPKG_CONFIG_EXECUTABLE="$PWD/../vcpkg/packages/pkgconf_x64-windows/tools/pkgconf/pkgconf.exe"

    # Step 5: Build the project with MSBuild
    - name: Build with MSBuild
      run: |
        cd build
        cmake --build . --config Release  

    # Step 6: Run tests with CTest
    - name: Run tests with CTest
      run: |
        cd build
        dir
        ctest -N
        ctest -C Release --output-on-failure  # Run tests and output on failure
    - name: Prepare build artifacts
      run: |
        cd build
        dir
        cd Release
        Get-ChildItem -File | Where-Object { $_.Extension -eq '.dll' -or $_.Extension -eq '.exe' } | Compress-Archive -DestinationPath ctoast_nightly-${{ github.run_id }}.zip

    - name: Create GitHub release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: nightly-${{ github.run_id }}
        release_name: Nightly Build ${{ github.run_id }}
        body: |
          This is the nightly build of CinnamonToast.
          These builds are automatically generated, and may contain bugs.
          If you see any bugs, please submit an issue immediately.

          Please note that these builds are not signed.
        files: |
          build/Release/ctoast_nightly-${{ github.run_id }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
